<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/01/git_use/"/>
    <url>/2023/05/01/git_use/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Git工作原理"><a href="#1-Git工作原理" class="headerlink" title="1 Git工作原理"></a>1 Git工作原理</h1><h2 id="1-1-Git工作流程图"><a href="#1-1-Git工作流程图" class="headerlink" title="1.1 Git工作流程图"></a>1.1 Git工作流程图</h2><p><img src="e:\soft_use_dir\git_use.assets\image-20220817134459306.png" alt="image-20220817134459306"></p><h2 id="1-2-文件的状态"><a href="#1-2-文件的状态" class="headerlink" title="1.2 文件的状态"></a>1.2 文件的状态</h2><p>（1）文件的状态可以划分为两种：tracked和untracked。使用git status可以查看状态：</p><ul><li>未跟踪</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   test.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>跟踪未暂存</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“Changes not staged <span class="keyword">for</span> commit:”</span><br></pre></td></tr></table></figure><ul><li>跟踪已暂存</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“Changes to be committed:”</span><br></pre></td></tr></table></figure><p>（2）只有tracked文件才被纳入版本控制管理，它们的状态可能是未更新，已修改或者已放入暂存区（不一定在暂存区）</p><p>（3）untracked文件不受git进行版本管理，一定不在暂存区</p><p>（4）使用git add命令可以把，untracked文件变为tracked文件，并存放到index（暂存区）：git add . 是追踪并暂存所有文件。git add filename是追踪并暂存指定文件。git commit 存放的是git add之前的文件编辑记录，因此每次commit提交前，先git add暂存</p><p>（5）解除跟踪 git rm -r –cached filename 。区别删除本地文件：git rm -r –f  filename (git rm filename)。删除文件夹：git rm -r filefolder</p><p>（6）忽略跟踪部分文件</p><ul><li>命令：touch .gitignore</li></ul><p>文件 <code>.gitignore</code> 的格式规范如下：</p><ul><li><p>所有空行或者以注释符号 <code>＃</code> 开头的行都会被 Git 忽略。</p></li><li><p>可以使用标准的 glob 模式匹配。</p></li><li><p>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的是目录。</p></li><li><p>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class="line">!lib.txt     #但lib.txt除外</span><br><span class="line">/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build/       #忽略build/目录下的所有文件</span><br><span class="line">doc<span class="comment">/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure></li></ul><p>（7）暂存后只有commit提交后才能保存到本地仓库，提交命令：git commit -m “文件说明”（一定要有文件说明），提交后的文件状态如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m<span class="string">&quot;v1.0&quot;</span></span><br><span class="line">[master (root-commit) <span class="number">247b</span>c32] v1<span class="number">.0</span></span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br><span class="line"> create mode <span class="number">100644</span> test.txt</span><br><span class="line">    </span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>（8）文件的生命周期</p><p><img src="D:\soft_use_dir\git_use.assets\image-20220817093816945.png" alt="image-20220817093816945"></p><h2 id="1-3-分支与多人协作"><a href="#1-3-分支与多人协作" class="headerlink" title="1.3 分支与多人协作"></a>1.3 分支与多人协作</h2><p>使用分支可以将工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线</p><p>一个工作区workplace只能对应一个分支branch</p><p>HEAD指向的是当前分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git-log</span></span><br><span class="line">* fbe7b47 (HEAD -&gt; master, dev01) v2.0</span><br><span class="line">* 247bc32 v1.0</span><br></pre></td></tr></table></figure><ul><li>分支的相关命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge [branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure><h1 id="2-常用指令"><a href="#2-常用指令" class="headerlink" title="2 常用指令"></a>2 常用指令</h1><h2 id="2-1-核心重要指令"><a href="#2-1-核心重要指令" class="headerlink" title="2.1 核心重要指令"></a>2.1 核心重要指令</h2><p>工作流程上的7个指令（add + commit + push + clone + fetch + checkout + pull）</p><p>2 个常用指令：(log + merge)</p><h2 id="2-2-常用指令速查"><a href="#2-2-常用指令速查" class="headerlink" title="2.2 常用指令速查"></a>2.2 常用指令速查</h2><ul><li>基本操作类：<ul><li>git init  初始化仓库</li><li>git-log 查看日志，先进行指令别名设置才行</li><li>git add <filename> 添加到暂存区</li><li>git commit -m “注释” 提交到仓库</li><li>git merge &lt;分支名&gt; 合并指定分之到当前活跃分支</li></ul></li><li>分支切换类：<ul><li>git checkout &lt;分支名&gt; 切换到某个分支</li><li>git checkout -b &lt;分支名&gt; 创建并切换到某个分支（分支原来不存在）</li></ul></li><li>远程操作类：<ul><li>git clone &lt;远程地址&gt; [本地文件夹] 克隆远程仓库到本地文件夹下</li><li>git remote add origin &lt;远程仓库URL&gt;   提交到远程仓库add orijin是约定俗成的</li><li>git push [–set-upstream] origin &lt;分支名&gt; 推送本地修改到远端分支  [–set-upstream] 表示和远端分支绑定关联关系，只有第一次推送时才需要此参数</li></ul></li></ul><h2 id="2-3-快捷键配置"><a href="#2-3-快捷键配置" class="headerlink" title="2.3 快捷键配置"></a>2.3 快捷键配置</h2><ol><li><p>设置别名</p><ul><li><p>打开用户目录<code>YangRongTai@DESKTOP-8FTB99F MINGW64 ~</code></p></li><li><p><code>touch ~/.bashrc</code></p></li><li><pre><code class="shell"># 用于输出git提交日志alias git-log=&#39;git log --pretty=oneline --all --graph --abbrev-commit&#39;# 用于输出当前目录所有文件及基本信息alias ll=&#39;ls -al&#39;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - `source ~/.bashrc`</span><br><span class="line"></span><br><span class="line"># 3 使用场景</span><br><span class="line"></span><br><span class="line">## 3.1 本地文件上传到Gitee</span><br><span class="line"></span><br><span class="line">&gt; 前提：Gitee网页已经创建好仓库（远程仓库）</span><br><span class="line"></span><br><span class="line">### 3.1.1 基本流程</span><br><span class="line"></span><br><span class="line">初始化本地文件——文件编辑——文件添加到暂存区——提交到本地仓库——添加远程仓库URL——推送到本地仓库</span><br><span class="line"></span><br><span class="line">- ```shell</span><br><span class="line">  mkdir soft_use_dir</span><br><span class="line">  cd soft_use_dir</span><br><span class="line">  # 初始化本地文件</span><br><span class="line">  git init </span><br><span class="line">  touch README.md</span><br><span class="line">  # 添加到暂存区</span><br><span class="line">  git add README.md </span><br><span class="line">  # 提交到本地仓库</span><br><span class="line">  git commit -m &quot;first commit&quot; </span><br><span class="line">  # 添加远程仓库URL</span><br><span class="line">  git remote add origin https://gitee.com/rongtaiyang/soft_use_dir.git </span><br><span class="line">  # 推送到远程仓库</span><br><span class="line">  git push -u origin &quot;master&quot;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><h3 id="3-1-2-指令说明"><a href="#3-1-2-指令说明" class="headerlink" title="3.1.2 指令说明"></a>3.1.2 指令说明</h3><p>（1）重要指令解析</p><ul><li><p>1.添加远程仓库</p><p>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</p><p>&lt;远端名称&gt; 默认是origin，取决于远端服务器设置</p><p>&lt;仓库路径&gt; 远端仓库URL</p></li><li><p>2.查看远程仓库</p><p>git remote -v</p></li><li><p>3.推送到远程仓库</p><p>git push [-f] [–set-pustream] [远端名称 [本地分支名] [:远端分支名] ]</p><p>说明一：</p><p>-u 是指如果当前分支与多个主机存在追踪关系，则可以使用<code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git push</code> &#x2F;&#x2F;更多请阅读：<a href="https://www.yiibai.com/git/git_push.html">https://www.yiibai.com/git/git_push.html</a> </p><p>-f 是指如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做<code>git pull</code>合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用<code>–force</code>选项 &#x2F;&#x2F;更多请阅读：<a href="https://www.yiibai.com/git/git_push.html">https://www.yiibai.com/git/git_push.html</a> </p><p>说明二：</p><ul><li><p>如果远端分支名和本地分支名称相同，则可以只写本地分支</p><p>git push origin master</p></li><li><p>–set-upstream推送到远端的同时并且建立起和远端分支的关联关系</p><p>git push –set-upstream origin master</p></li><li><p>如果当前分支已经和远端分支关联，则可以省略分支名和远端名</p><p>git push 将master分支推送到已关联的远端分支</p></li></ul><p>说明三：</p><p>使用git push origin master时，可以push到origin的多个url地址</p><p>说明四：</p><p>向其他仓库push的时候就要再次使用<code>git push -u $&#123;remote_name&#125; $&#123;branch_name&#125;</code>，这样就可以向名为remote_name的仓库的branch_name分支进行push了，而且之后使用<code>git push</code>也将向这个仓库push</p></li></ul><p>（2）常见问题及解决方案</p><ul><li><p>常见问题1：远程来源已经存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LENOVO@DESKTOP-I48JHEH MINGW64 /d/soft_use_dir (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add origin https://gitee.com/rongtaiyang/soft_use_dir.git</span></span><br><span class="line">error: remote origin already exists.</span><br></pre></td></tr></table></figure><p>解决方案一：删除存在的来源，重新添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LENOVO@DESKTOP-I48JHEH MINGW64 /d/soft_use_dir (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote <span class="built_in">rm</span> origin</span></span><br></pre></td></tr></table></figure><p>解决方案二：</p><p>如果在github的remote上已经有了文件，会出现error。那么应当先pull一下，即：</p><p>git pull origin master</p></li></ul><h2 id="3-2-IDEA与Gitee的协调开发"><a href="#3-2-IDEA与Gitee的协调开发" class="headerlink" title="3.2 IDEA与Gitee的协调开发"></a>3.2 IDEA与Gitee的协调开发</h2><ul><li>1.在pycharm中上传当前文件&#x2F;文件夹到Gitee</li></ul><h2 id="3-3-查看历史"><a href="#3-3-查看历史" class="headerlink" title="3.3 查看历史"></a>3.3 查看历史</h2><h3 id="3-3-1-在本地查看"><a href="#3-3-1-在本地查看" class="headerlink" title="3.3.1 在本地查看"></a>3.3.1 在本地查看</h3><ul><li>git log [option]</li></ul><p>options</p><p>–all 显示所有分支</p><p>–pretty&#x3D;online 将提交信息显示为一行（注意等号两边不能有空格）</p><p>–abbrev-commit使得输出的commitld更简短</p><p>–graph</p><ul><li><p>git-log 别名配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在用户目录下 C:\Users\LENOVO</span></span><br><span class="line">LENOVO@DESKTOP-I48JHEH MINGW64 ~</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> ~/.bashrc</span></span><br><span class="line"></span><br><span class="line">LENOVO@DESKTOP-I48JHEH MINGW64 ~</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi .bashrc</span></span><br></pre></td></tr></table></figure><p>添加 .bashrc内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use to put out git <span class="built_in">log</span></span></span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br></pre></td></tr></table></figure><p> 保存后运行：source ~&#x2F;.bashrc</p></li></ul><h3 id="3-3-2-版本回退"><a href="#3-3-2-版本回退" class="headerlink" title="3.3.2 版本回退"></a>3.3.2 版本回退</h3><p>（1）命令：git reset –hard commitID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git log --abbrev-commit</span><br><span class="line">commit fbe7b47 (HEAD -&gt; master)</span><br><span class="line">Author: YangRongTai &lt;15969047214@163.com&gt;</span><br><span class="line">Date:   Wed Aug 17 13:21:13 2022 +0800</span><br><span class="line"></span><br><span class="line">    v2.0</span><br><span class="line"></span><br><span class="line">commit 247bc32</span><br><span class="line">Author: YangRongTai &lt;15969047214@163.com&gt;</span><br><span class="line">Date:   Wed Aug 17 11:33:48 2022 +0800</span><br><span class="line"></span><br><span class="line">    v1.0</span><br></pre></td></tr></table></figure><p>如上：v1.0 的commitID为：247bc32</p><p>（2）再次返回v2.0</p><p>git reset –hard fbe7b47</p><p>（3）版本回退不会删除版本，使用git reset –hard commitID可以让当前文件回退到指定版本</p><p>（4）使用git  reflog可以查看所有的操作记录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line"><span class="title function_">fbe7b47</span> <span class="params">(HEAD -&gt; master)</span> HEAD@&#123;<span class="number">0</span>&#125;: reset: moving to fbe7b47</span><br><span class="line"><span class="number">247b</span>c32 HEAD@&#123;<span class="number">1</span>&#125;: reset: moving to <span class="number">247b</span>c32</span><br><span class="line"><span class="title function_">fbe7b47</span> <span class="params">(HEAD -&gt; master)</span> HEAD@&#123;<span class="number">2</span>&#125;: commit: v2<span class="number">.0</span></span><br><span class="line"><span class="number">247b</span>c32 HEAD@&#123;<span class="number">3</span>&#125;: commit (initial): v1<span class="number">.0</span></span><br></pre></td></tr></table></figure><h2 id="3-4-Linux下Git的使用"><a href="#3-4-Linux下Git的使用" class="headerlink" title="3.4 Linux下Git的使用"></a>3.4 Linux下Git的使用</h2><h2 id="3-5-dev分支合并到master分支"><a href="#3-5-dev分支合并到master分支" class="headerlink" title="3.5 dev分支合并到master分支"></a>3.5 dev分支合并到master分支</h2><ol><li>切换到maser分支 ：<code>git checkout master</code></li><li>合并dev分支：<code>git merge dev</code> 。ESC切换vim到命令模式，<code>:wq</code>保存退出，此时dev的代码被同步到了master上</li><li>在master分支上提交更新后的代码到远程仓库即可：<code>git push -u origin master</code></li></ol><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p>狂神说：</p><p><a href="https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ">https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ</a></p><p>官方中文文档：</p><p><a href="https://gitee.com/progit/">Pro Git（中文版） (gitee.com)</a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>fatal: unable to access ‘<a href="https://github.com/sophon001/sophon001.github.io.git/">https://github.com/sophon001/sophon001.github.io.git/</a>‘: OpenSSL SSL_read: Connection was reset, errno 10054</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/01/Github%20Pages/"/>
    <url>/2023/05/01/Github%20Pages/</url>
    
    <content type="html"><![CDATA[<h1 id="两种基本用法"><a href="#两种基本用法" class="headerlink" title="两种基本用法"></a>两种基本用法</h1><ul><li><p>用作自己或者组织的网站。访问地址示例：(<a href="http://username.github.io)/">http://username.github.io）</a></p></li><li><p>用作某一个项目的网站。（访问地址示例：<a href="https://link.zhihu.com/?target=http://username.github.io/projectname">http://username.github.io/projectname</a>）</p></li></ul><h1 id="用作自己的网站"><a href="#用作自己的网站" class="headerlink" title="用作自己的网站"></a>用作自己的网站</h1><ul><li>参考博客</li></ul><h1 id="用作项目的网站"><a href="#用作项目的网站" class="headerlink" title="用作项目的网站"></a>用作项目的网站</h1><ul><li>创建仓库</li><li>克隆到本地完善仓库</li><li>创建一个gh-pages分支，push到github仓库</li><li>设置GitHub Pages 的 source<ul><li>点击项目的 Settings 按钮，找到 GitHub Pages 选项，然后选择相应的分支作为 source，如果你在上一步选择了创建 gh-pages 分支，那么这里就无需设置，因为 github 默认 gh-pages 分支作为项目的 GitHub Pages source，当你创建 gp-pages 分支的时候就会自动为你设置好。</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nice to meet you!</title>
    <link href="/2023/04/30/self_introduction/"/>
    <url>/2023/04/30/self_introduction/</url>
    
    <content type="html"><![CDATA[<p>I am a graduate student studying natural language processing, and I will record my learning process here. If you are interested in my project, please feel free to discuss it with me.</p>]]></content>
    
    
    <categories>
      
      <category>personal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>author</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>draft1</title>
    <link href="/2023/04/30/draft1/"/>
    <url>/2023/04/30/draft1/</url>
    
    <content type="html"><![CDATA[<h1 id="draft1"><a href="#draft1" class="headerlink" title="draft1"></a>draft1</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>new post</title>
    <link href="/2023/04/30/new-post/"/>
    <url>/2023/04/30/new-post/</url>
    
    <content type="html"><![CDATA[<h1 id="新页面"><a href="#新页面" class="headerlink" title="新页面"></a>新页面</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo for blog</title>
    <link href="/2023/04/30/hexo-blog/"/>
    <url>/2023/04/30/hexo-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>参考视频：<a href="https://www.bilibili.com/video/BV1cW411A7Jx/?p=7&spm_id_from=333.1007.top_right_bar_window_history.content.click">https://www.bilibili.com/video/BV1cW411A7Jx/?p=7&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click</a></p><h1 id="四个重要命令"><a href="#四个重要命令" class="headerlink" title="四个重要命令"></a>四个重要命令</h1><ul><li>hexo clean<ul><li>清除hexo g命令产生的缓存，publish文件夹被删除</li></ul></li><li>hexo g<ul><li>generate：产生静态网页，生成一个publish文件夹，hexo d推送到github pages上的就是这个文件夹里面的内容</li></ul></li><li>hexo s<ul><li>server：启动本地静态网页服务</li></ul></li><li>hexo d<ul><li>deploy：推送publish文件夹里面的内容到github pages上</li></ul></li></ul><h1 id="hexo本地使用"><a href="#hexo本地使用" class="headerlink" title="hexo本地使用"></a>hexo本地使用</h1><p>新建一个文件夹：blog</p><p>切换到该文件夹下，使用Git Bash打开，执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>使用三个命令即可构建本地静态网页，并且访问</p><p>hexo clean</p><p>hexo g</p><p>hexo s</p><h1 id="主题的更换"><a href="#主题的更换" class="headerlink" title="主题的更换"></a>主题的更换</h1><p>参考文档：<a href="https://hexo.io/zh-cn/docs/themes">主题 | Hexo</a></p><p>到<a href="https://hexo.io/themes/">Themes | Hexo</a>中下载喜欢的主题</p><p>复制到themes文件夹下，进入主题文件夹中，修改<code>_config.yml</code>文件，有的需要选择主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><p>到Blog文件夹下修改<code>_config.yml</code>文件，其中要添加<code>root: /</code>，否则推送到github的主题不会更新</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://sophon001.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>在主题配置文件<code>_config.yml</code>中进行设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  archives: /archives</span><br></pre></td></tr></table></figure><p>配置后创建page布局格式的页面，以便和分类相对应，否则会找不到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">YangRongTai@DESKTOP-8FTB99F MINGW64 /e/Blog/Blog</span><br><span class="line">$ hexo new page categories</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: E:\Blog\Blog\<span class="built_in">source</span>\categories\index.md</span><br><span class="line">(base)</span><br><span class="line">YangRongTai@DESKTOP-8FTB99F MINGW64 /e/Blog/Blog</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>在该目录下修改index.md文件<code>E:\Blog\Blog\source\categories</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: categories</span><br><span class="line"><span class="built_in">date</span>: 2023-04-30 19:18:15</span><br><span class="line"><span class="built_in">type</span>:<span class="string">&quot;categories&quot;</span></span><br><span class="line">comments:<span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web develop</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello world</title>
    <link href="/2023/04/30/hello-world/"/>
    <url>/2023/04/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>personal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>author</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
